"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[996],{8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6540);const a={},o=i.createContext(a);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},9255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Liquidations/Liquidation Interface Functions","title":"Liquidation Interface Functions","description":"Liquidation Interface Functions","source":"@site/docs/Liquidations/Liquidation Interface Functions.md","sourceDirName":"Liquidations","slug":"/Liquidations/Liquidation Interface Functions","permalink":"/oc-stablecoin/Liquidations/Liquidation Interface Functions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"sidebar_label":"Liquidation Interface","toc_min_heading_level":2,"toc_max_heading_level":6},"sidebar":"mainSidebar","previous":{"title":"Liquidation Rewards Mechanism","permalink":"/oc-stablecoin/Liquidations/Rewards Mechanism"},"next":{"title":"Protocol Fees","permalink":"/oc-stablecoin/Fees"}}');var a=n(4848),o=n(8453);const r={hide_title:!0,sidebar_label:"Liquidation Interface",toc_min_heading_level:2,toc_max_heading_level:6},l=void 0,s={},d=[{value:"Liquidation Interface Functions",id:"liquidation-interface-functions",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"liquidation-interface-functions",children:"Liquidation Interface Functions"}),"\n",(0,a.jsxs)(t.p,{children:["This section outlines the user-facing functions available within the ",(0,a.jsx)(t.code,{children:"DSCEngine"})," contract that are directly related to the liquidation process. These functions allow anyone to identify and liquidate undercollateralized vaults, contributing to the protocol's stability."]}),"\n",(0,a.jsx)(t.p,{children:"There are two primary functions users can interact with for liquidations:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"markVaultAsUnderwater()"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"liquidateVault()"})}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The two functions are explained below together with their parameters:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-solidity",children:"/**\n     * @notice Flags a vault as underwater and optionally initiates liquidation.\n     * @dev Intended for use by governance or keeper bots. Can be used to only mark or both mark and liquidate.\n     * @param collId The ID of the vault collateral token.\n     * @param owner The address of the vault owner.\n     * @param liquidate Whether to proceed with liquidation immediately.\n     * @param dsc The amount of DSC to repay if liquidating.\n     * @param withdraw Whether to withdraw the proceeds of liquidation from the protocol or not. This flexibility gives\n     * liquidators the option to keep the collateral within the protocol for future use such as opening new vaults\n     * themselves.\n     */\n    function markVaultAsUnderwater(\n        bytes32 collId,\n        address owner,\n        bool liquidate,\n        uint256 dsc,\n        bool withdraw\n    )\n        external;\n\n        /**\n     * @notice Executes the liquidation of an unhealthy vault by repaying its DSC debt and seizing collateral.\n     * @dev This is the core liquidation function responsible for handling the mechanics of an undercollateralized\n     * vault.\n     * It can be called by anyone, but the caller must supply the vault's amount of DSC to repay the debt.\n     *\n     * If the vault was not previously marked as underwater, the function will first flag it and apply the more generous\n     * liquidation reward parameters, providing greater incentive to the liquidator. These reward mechanics are defined\n     * in the Liquidation contract and ensure that early liquidators receive a premium.\n     *\n     * The function processes the liquidation in the following order:\n     * 1. Applies a liquidation penalty, deducted from the vault owner\u2019s locked collateral.\n     * 2. Calculates liquidation rewards for the liquidator based on the DSC repaid.\n     * 3. Burns the DSC supplied by the liquidator and charges protocol fees (also deducted from the owner's\n     * collateral).\n     *\n     * Liquidation outcomes fall into one of three categories:\n     *\n     * 1. Sufficient Collateral for Full Liquidation:\n     *    The vault has enough collateral to cover both the base repayment (i.e., collateral equivalent of DSC debt)\n     *    and the calculated liquidation rewards. The liquidator receives both in full.\n     *\n     * 2. Partial Rewards:\n     *    The vault has enough to repay the base DSC-equivalent collateral but not the full rewards.\n     *    The liquidator receives the base and as much of the rewards as available. If the remaining collateral\n     *    is only sufficient for base repayment, then rewards may be zero.\n     *\n     * 3. Insufficient Collateral (Bad Debt):\n     *    The vault doesn't have enough collateral to repay even the base amount. The liquidator receives no collateral.\n     *    Instead, the DSC they repaid is refunded by minting new DSC from the protocol to cover their loss.\n     *    The protocol absorbs the bad debt and takes ownership of the vault. Once governance is implemented, custom\n     *    rules and resolutions can be introduced to handle absorbed bad debt positions.\n     *\n     * If the liquidator opts to withdraw (`withdraw = true`), their rewards are sent to their address.\n     * If not, the seized collateral remains in the protocol, credited to their internal balance for future use.\n     *\n     * Any excess collateral left after repaying DSC and rewards is returned to the vault owner.\n     *\n     * @param collId The ID of the collateral token.\n     * @param owner The address of the vault owner.\n     * @param dscToRepay The amount of DSC the liquidator is repaying to initiate liquidation.\n     * @param withdraw Whether the liquidator wants to immediately withdraw the received collateral from the protocol.\n     */\n    function liquidateVault(bytes32 collId, address owner, uint256 dscToRepay, bool withdraw) external;\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);